dR = gamma * I0
return(list(c(dS,dI,dR)))
})
}
out = ode(func = infection, y = yini, times = times)
library(deSolve)
TS = 1.0 # starting time
ND = 70.0 # ending time
parms = c(beta = 1.4247,gamma = 0.14286,S0 = 1-1e-6,I0 = 1e-6)
yini = c(I0,S0)
times = seq(TS,ND,by = 1)
infection = function(time, state, parms) {
with(as.list(c(state,parms)), {
dS = -beta * S0 * I0
dI = beta * S0 * I0 - gamma * I0
dR = gamma * I0
return(list(c(dS,dI,dR)))
})
}
out = ode(func = infection, y = yini, parms = parms, times = times)
library(deSolve)
TS = 1.0 # starting time
ND = 70.0 # ending time
parms = c(beta = 1.4247,gamma = 0.14286,S0 = 1-1e-6,I0 = 1e-6)
yini = c(I0 = 1-1e-6,S0 = 1e-6,R0 = 0)
times = seq(TS,ND,by = 1)
infection = function(time, state, parms) {
with(as.list(c(state,parms)), {
dS = -beta * S0 * I0
dI = beta * S0 * I0 - gamma * I0
dR = gamma * I0
return(list(c(dS,dI,dR)))
})
}
out = ode(func = infection, y = yini, parms = parms, times = times)
library(deSolve)
TS = 0.0 # starting time
ND = 70.0 # ending time
parms = c(beta = 1.4247,gamma = 0.14286,S0 = 1-1e-6,I0 = 1e-6)
yini = c(I0 = 1-1e-6,S0 = 1e-6,R0 = 0)
times = seq(TS,ND,by = 1)
infection = function(time, state, parms) {
with(as.list(c(state,parms)), {
dS = -beta * S0 * I0
dI = beta * S0 * I0 - gamma * I0
dR = gamma * I0
return(list(c(dS,dI,dR)))
})
}
out = ode(func = infection, y = yini, parms = parms, times = times)
summary(out)
matplot(out[,"time"],out[,2:4],type = "l")
library(deSolve)
TS = 0.0 # starting time
ND = 70.0 # ending time
parms = c(beta = 1.4247,gamma = 0.14286)
yini = c(I0 = 1-1e-6,S0 = 1e-6,R0 = 0)
times = seq(TS,ND,by = 1)
infection = function(time, state, parms) {
with(as.list(c(state,parms)), {
dS = -beta * S0 * I0
dI = beta * S0 * I0 - gamma * I0
dR = gamma * I0
return(list(c(dS,dI,dR)))
})
}
out = ode(func = infection, y = yini, parms = parms, times = times)
summary(out)
matplot(out[,"time"],out[,2:4],type = "l")
library(deSolve)
TS = 0.0 # starting time
ND = 70.0 # ending time
parms = c(beta = 1.4247,gamma = 0.14286)
yini = c(I0 = 1e-6,S0 = 1-1e-6,R0 = 0)
times = seq(TS,ND,by = 1)
SIR = function(time, state, parms) {
with(as.list(c(state,parms)), {
dS = -beta * S0 * I0
dI = beta * S0 * I0 - gamma * I0
dR = gamma * I0
return(list(c(dS,dI,dR)))
})
}
out = ode(func = infection, y = yini, parms = parms, times = times)
summary(out)
matplot(out[,"time"],out[,2:4],type = "l")
out = ode(func = infection, y = yini, parms = parms, times = times)
out = as.data.frame(out)
out$time = NULL
matplot(times,out,type = "l")
library(deSolve)
TS = 0.0 # starting time
ND = 70.0 # ending time
parms = c(beta = 1.4247,gamma = 0.14286)
yini = c(I0 = 1e-6,S0 = 1-1e-6,R0 = 0)
times = seq(TS,ND,by = 1)
SIR = function(time, state, parms) {
with(as.list(c(state,parms)), {
dS = -beta * S0 * I0
dI = beta * S0 * I0 - gamma * I0
dR = gamma * I0
return(list(c(dS,dI,dR)))
})
}
out = ode(func = infection, y = yini, parms = parms, times = times)
out = as.data.frame(out)
out$time = NULL
matplot(times,out,type = "l")
library(deSolve)
SIR = function(time, state, pars) {
with(as.list(c(state,pars)), {
dS = -beta * S0 * I0
dI = beta * S0 * I0 - gamma * I0
dR = gamma * I0
return(list(c(dS,dI,dR)))
})
}
yini = c(S0 = 1-1e-6,I0 = 1e-6,R0 = 0)
pars = c(beta = 1.4247,gamma = 0.14286)
times = seq(0,70,by = 1)
out = ode(func = SIR, y = yini, parms = pars, times = times)
out = as.data.frame(out)
out$time = NULL
matplot(times,out,type = "l")
## SIR model without democracy
## It is the simple SIR epidemic without births or deaths
matplot(times,out,type = "l", xlab = "Time", ylab = "Susceptibles and Recovereds", main = "SIR Model",
lwd = 2, lty = 2, bty = "l", col = 2:4)
legend(40,0.7,c("Susceptibles","Infecteds","Recovereds"), pch = 2, col = 2:4)
legend(40,2,c("Susceptibles","Infecteds","Recovereds"), pch = 2, col = 2:4)
matplot(times,out,type = "l", xlab = "Time", ylab = "Susceptibles and Recovereds", main = "SIR Model",
lwd = 2, lty = 2, bty = "l", col = 2:4)
legend(40,2,c("Susceptibles","Infecteds","Recovereds"), pch = 2, col = 2:4)
matplot(times,out,type = "l", xlab = "Time", ylab = "Susceptibles and Recovereds", main = "SIR Model",
lwd = 2, lty = 2, bty = "l", col = 2:4)
legend(40,0.5,c("Susceptibles","Infecteds","Recovereds"), pch = 2, col = 2:4)
legend(40,0.5,c("Susceptibles","Infecteds","Recovereds"), pch = 1, col = 2:4)
?pch
?bty
matplot(times,out,type = "l", xlab = "Time", ylab = "Susceptibles and Recovereds", main = "SIR Model",
lwd = 2, lty = 2, col = 2:4)
legend(40,0.5,c("Susceptibles","Infecteds","Recovereds"), col = 2:4)
matplot(times,out,type = "l", xlab = "Time", ylab = "Susceptibles and Recovereds", main = "SIR Model",
lwd = 2, lty = 2, col = 2:4)
legend(40,0.5,c("Susceptibles","Infecteds","Recovereds"),pch = 1, col = 2:4)
matplot(times,out,type = "l", xlab = "Time", ylab = "Susceptibles and Recovereds", main = "SIR Model",
lwd = 2, lty = 1, col = 2:4)
legend(40,0.5,c("Susceptibles","Infecteds","Recovereds"),pch = 1, col = 2:4)
matplot(times,out,type = "l", xlab = "Time(days)", ylab = "Susceptibles and Recovereds", main = "SIR Model",
lwd = 2, lty = 1, col = 2:4)
legend(40,0.5,c("Susceptibles","Infecteds","Recovereds"),pch = 1, col = 2:4)
legend("right",c("Susceptibles","Infecteds","Recovereds"),pch = 1, col = 2:4)
legend(60,0.5,c("Susceptibles","Infecteds","Recovereds"),pch = 1, col = 2:4)
matplot(times,out,type = "l", xlab = "Time(days)", ylab = "Susceptibles and Recovereds", main = "SIR Model",
lwd = 2, lty = 1, col = 2:4)
legend(60,0.5,c("Susceptibles","Infecteds","Recovereds"),pch = 1, col = 2:4)
library(deSolve)
SIR = function(time, state, pars) {
with(as.list(c(state,pars)), {
dS = -beta * S0 * I0
dI = beta * S0 * I0 - gamma * I0
dR = gamma * I0
return(list(c(dS,dI,dR)))
})
}
yini = c(S0 = 1-1e-6,I0 = 1e-6,R0 = 0)
pars = c(beta = 1.4247,gamma = 0.14286)
times = seq(0,70,by = 1)
out = ode(func = SIR, y = yini, parms = pars, times = times)
out = as.data.frame(out)
out$time = NULL
matplot(times,out,type = "l", xlab = "Time(days)", ylab = "Susceptibles and Recovereds", main = "SIR Model",
lwd = 2, lty = 1, col = 2:4)
legend(60,0.5,c("Susceptibles","Infecteds","Recovereds"),pch = 1, col = 2:4)
?matplot
library("DICE", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
remove.packages("DICE")
require(DICE)
library(DICE)
rm(list = ls())
require(DICE)
dataType = 'cdc'
year = 2010
nweeksFit = 52
RegState = "AZ"
model = 5
ireal = 1
idevice = 1
myName = "arizona-maricopa-2010-2011-5-52-1" #paste(dataType,'-','Region',RegState,'-',year,'-',(year+1),'-',model,'-',nweeksFit,'-',ireal,sep="")
## Loading the data (into mydata) and run.list
filename = paste("input-",myName,'.RData',sep="")
## This loads the object mydata - with ALL the data
load(filename)
run.list = input$run.list
filename = paste('profiles-',myName,'.RData',sep ="")
## This load an object called dump and from it we will
load(filename)
model_rtn = dump$model_rtn
model_profile = dump$model_profile
mydata$model$factor = 1
err <- plotFitOnePatch.ggplot2(model_rtn = model_rtn, model_profile = model_profile, mydata = mydata, ireal = ireal, run.list=run.list, idevice = 1)
setwd("~/Documents/yinzhuo ding/Dice plotting 1")
rm(list = ls())
require(DICE)
dataType = 'cdc'
year = 2010
nweeksFit = 52
RegState = "AZ"
model = 5
ireal = 1
idevice = 1
myName = "arizona-maricopa-2010-2011-5-52-1" #paste(dataType,'-','Region',RegState,'-',year,'-',(year+1),'-',model,'-',nweeksFit,'-',ireal,sep="")
## Loading the data (into mydata) and run.list
filename = paste("input-",myName,'.RData',sep="")
## This loads the object mydata - with ALL the data
load(filename)
run.list = input$run.list
filename = paste('profiles-',myName,'.RData',sep ="")
## This load an object called dump and from it we will
load(filename)
model_rtn = dump$model_rtn
model_profile = dump$model_profile
mydata$model$factor = 1
library(ggplot2)
library(grid)
library(scales)
library(reshape2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
plots <- c(list(...), plotlist)
numPlots = length(plots)
if (is.null(layout)) {
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
for (i in 1:numPlots) {
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
FY = mydata$FY
model = mydata$imodel
weeks = mydata$weeks
nweeks = mydata$nweeks
nweeksFit = mydata$nweeksFit
nweeksData = mydata$nweeksData
reg.model.name = mydata$model$name
nRnd = dim(model_profile)[1]
n.model = 1
model_onset = mydata$model$onset
tps = mydata$weeks
myName = mydata$dataName
model_factor = mydata$model$factor
## This model raw data
model_ili = mydata$model$raw
model_rtn_ili = NULL
model_profile_ili = NULL
if (!is.null(model_rtn))
model_rtn_ili = model_rtn/model_factor
if (!is.null(model_profile)) {
model_profile_ili = model_profile
model_profile_ili = model_profile_ili/model_factor
}
if (nweeksFit < nweeks) {
index <- which(model_ili == 0)
if (length(index) >= 1)
model_ili[index] = NA
}
if (mydata$dataType == 'cdc' | mydata$dataType == 'gft') {
ylab = '%ILI'
} else {
ylab = '# Cases'
}
plotlist = list() # For saving all the plots
model_mean = rep(0,nweeks)
for (iweek in 1:nweeks) model_mean[iweek] = mean(model_profile_ili[, iweek])
ymax = max(model_rtn_ili[1:nweeksData], model_profile_ili[,1:nweeksData], model_ili[1:nweeksData], na.rm = TRUE)
breaks = seq(from = 1, to = nweeks, by = 4)
labels = weeks[breaks]
plotlist[[1]] = ggplot(data = NULL) +
scale_x_continuous(name = "EW #", limits = c(1,nweeks),
breaks = breaks, labels = labels) +
scale_y_continuous(name = ylab, limits = c(0, ymax)) +
theme(text = element_text(size = 10, color = "gray20", face = "italic"),
axis.text.x = element_text(face = "plain"),
axis.text.y = element_text(face = "plain"))
plotlist[[1]]
step = max(1,nRnd/100)
irnd.set = seq(from = 1, to = nRnd, by = step)
dat.rnd = t(model_profile[irnd.set, 1:nweeksFit])
dat.rnd.pred = t(model_profile_ili[irnd.set,nweeksFit:nweeks])
data.rnd = melt(dat.rnd)
data.rnd.pred = melt(dat.rnd.pred)
plotlist[[1]] = plotlist[[1]] + geom_line(aes(x = data.rnd[,1], y = data.rnd[,3], group = data.rnd[,2]), col = "#E495A5", size = 2, alpha = 0.4) +
geom_line(aes(x = 1:nweeksFit, y = model_rtn_ili[1:nweeksFit]), col = "#39BEB1", size = 1) +
geom_line(aes(x = 1:nweeksFit, y = model_mean[1:nweeksFit]), col = "#099DD7", size = 0.8) +
geom_rect(aes(xmin = nweeksFit, xmax = min(nweeksFit + 4, nweeks), ymin = 0, ymax = ymax), fill = "#D497D3",alpha = 0.7)
geom_line(aes(x = 1:nweeks, y = model_ili), col = "black", na.rm = TRUE) +
geom_point(aes(x = 1:nweeksFit, y = model_ili[1:nweeksFit]), col = "#24576D", size = 1,na.rm = TRUE)
plotlist[[1]] = plotlist[[1]] + geom_line(aes(x = data.rnd[,1], y = data.rnd[,3], group = data.rnd[,2]), col = "#E495A5", size = 2, alpha = 0.4) +
geom_line(aes(x = 1:nweeksFit, y = model_rtn_ili[1:nweeksFit]), col = "#39BEB1", size = 1) +
geom_line(aes(x = 1:nweeksFit, y = model_mean[1:nweeksFit]), col = "#099DD7", size = 0.8) +
geom_rect(aes(xmin = nweeksFit, xmax = min(nweeksFit + 4, nweeks), ymin = 0, ymax = ymax), fill = "#D497D3",alpha = 0.7) +
geom_line(aes(x = 1:nweeks, y = model_ili), col = "black", na.rm = TRUE) +
geom_point(aes(x = 1:nweeksFit, y = model_ili[1:nweeksFit]), col = "#24576D", size = 1,na.rm = TRUE)
if (nweeks > nweeksFit) {
plotlist[[1]] = plotlist[[1]] +
geom_line(aes(x = (data.rnd.pred[,1] + nweeksFit - 1), y = data.rnd.pred[,3], group = data.rnd.pred[,2]), col = "#E495A5", size = 2, linetype = 2,alpha = 0.4) +
geom_line(aes(x = nweeksFit:nweeks, y = model_rtn_ili[nweeksFit:nweeks]), col = "#39BEB1", size = 1, linetype = 2) +
geom_line(aes(x = nweeksFit:nweeks, y = model_mean[nweeksFit:nweeks]), col = "#099DD7", size = 0.8, linetype = 2)
}
if (length(model_onset) > 0) {
plotlist[[1]] = plotlist[[1]] +
geom_hline(yintercept = model_onset, col = "#D497D3", size = 1, linetype = 2)
}
reg.name = paste("   ", mydata$model$name, c("-Data", "-Model-Best", "-Model-Mean", "-Model-Random"), sep = "")
plotlist[[1]] = plotlist[[1]] + annotate("text", x = rep(-Inf,5), y = rep(Inf,5),
label = c(paste("   ", mydata$FY, sep = ""), reg.name),
hjust = rep(0,5), vjust = seq(from = 2.5, to = 8.5, by = 1.5),
col = c("black","black","#39BEB1","#099DD7","#E495A5"),
family = "serif", size = 3.5)
# The following two blocks have not been tested
if (model == 2 || model == 3) {
school = mydata$model$school
school[school == 0] = NA
plotlist[[1]] = plotlist[[1]] + geom_point(aes(y = school), col = "#24576D", size = 3, pch = 22)
}
if (model == 1 || model == 3) {
sh = mydata$model$sh
plotlist[[1]] = plotlist[[1]] + geom_line(aes(y = sh),col = "black", size = 1)
}
plotlist[[1]]
dat_model_wk_max = which.max(model_ili)
# maximum week in model
drct_model_wk_max = rep(0, nRnd)
if (!is.null(model_profile_ili))
for (i in 1:nRnd) drct_model_wk_max[i] = which.max(model_profile_ili[i, ])
if (!is.null(model_profile_ili)) {
wk.min = round(min(dat_model_wk_max,drct_model_wk_max))
wk.max = round(max(dat_model_wk_max,drct_model_wk_max))
}
wk.min = round(0.5*wk.min)
wk.max = round(1.5*wk.max)
wk.max = min(wk.max,nweeks)
wk.min = max(1,wk.min)
ylab = "Probability Density"
xlab = "EW #"
# Plot histograms of maximum week in model
breaks = seq(from = wk.min, to = wk.max, by = 1)
breaks_x = seq(from = wk.min, to = wk.max, by = 4)
labels = weeks[breaks_x]
data = data.frame(x = c(dat_model_wk_max, drct_model_wk_max),
y = c(rep(0,length(dat_model_wk_max)),rep(1,length(drct_model_wk_max))))
plotlist[[2]] = ggplot(data = data, aes(x = x)) +
geom_histogram(data = subset(data, y == 0), aes(y = ..density..),
breaks = breaks, fill = "dodgerblue",col = "black", alpha = 0.7) +
geom_histogram(data = subset(data, y == 1), aes(y = ..density..),
breaks = breaks, fill = "deeppink", col = "black", alpha = 0.7) +
scale_x_continuous(name = xlab, limits = range(breaks),
breaks = breaks_x, labels = labels) +
scale_y_continuous(name = ylab) +
theme(text = element_text(size = 10, color = "gray20", face = "italic"),
axis.text.x = element_text(face = "plain"),
axis.text.y = element_text(face = "plain"))
plotlist[[2]]
model.name = mydata$model$name
gsub(model.name, ".", " ", model.name)
leg.text = c(mydata$FY, model.name,"Data", "Model")
plotlist[[2]] = plotlist[[2]] +
annotate("text", x = c(rep(-Inf,2), rep(Inf,4)), y = rep(Inf,6),
label = c(paste("   ", "Observed/Predicted", sep = ""), paste("   ", "Peak Week", sep = ""), leg.text),
hjust = c(0,0,1,1,1,1), vjust = c(2.5,4,seq(from = 2.5, to = 7, by = 1.5)),
col = c("black","black","black","black","dodgerblue","deeppink"),
family = "serif", size = 3.5)
## Histogram plots - of %ILI binned
ylab = "Probability Density"
xlab = "% ILI"
if (!is.null(model_profile_ili)) {
for (iweek in nweeksFit:min(nweeks,nweeksFit+4)) {
min.val = 0
if (iweek <= nweeksData) {
max.val = ceiling(max(model_ili[iweek], model_profile_ili[, iweek]))
max.val = 2 * max.val
breaks = seq(from = min.val, to = max.val, by = 0.5)
data = data.frame(x = c(model_ili[iweek], model_profile_ili[,iweek]),
y = c(rep(0,length(model_ili[iweek])),rep(1,length(model_profile_ili[,iweek]))))
plotlist[[iweek - nweeksFit + 3]] = ggplot(data = data, aes(x = x)) +
geom_histogram(data = subset(data, y == 0), aes(y = ..density..),
breaks = breaks, fill = "dodgerblue",col = "black", alpha = 0.7) +
geom_histogram(data = subset(data, y == 1), aes(y = ..density..),
breaks = breaks, fill = "deeppink", col = "black", alpha = 0.7) +
scale_x_continuous(name = xlab, limits = range(breaks),
breaks = seq(from = min.val, to = max.val, by = 2)) +
scale_y_continuous(name = ylab) +
theme(text = element_text(size = 10, color = "gray20", face = "italic"),
axis.text.x = element_text(face = "plain"),
axis.text.y = element_text(face = "plain"))
model.name = mydata$model$name
my.week = paste("EW # ", weeks[iweek], sep = "")
gsub(model.name, ".", " ", model.name)
leg.text = c(mydata$FY, model.name, "Data", "Model")
plotlist[[iweek - nweeksFit + 3]] = plotlist[[iweek - nweeksFit + 3]] +
annotate("text", x = c(rep(-Inf,2), rep(Inf,4)), y = rep(Inf,6),
label = c(paste("   ", "Observed/Predicted", sep = ""), paste("   %ILI for ", my.week, sep = ""), leg.text),
hjust = c(0,0,1,1,1,1), vjust = c(2.5,4,seq(from = 2.5, to = 7, by = 1.5)),
col = c("black","black","black","black","dodgerblue","deeppink"),
family = "serif", size = 3.5)
}
else {
max.val = ceiling(max(model_profile_ili[, iweek]))
max.val = 2 * max.val
breaks = seq(from = min.val, to = max.val, by = 0.5)
plotlist[[iweek - nweeksFit + 3]] = ggplot(data = NULL) +
geom_histogram(aes(model_profile_ili[,iweek], y = ..density..),
fill = "dodgerblue",col = "black",breaks = breaks, alpha = 0.7) +
scale_x_continuous(name = xlab, limits = c(breaks[1], breaks[length(breaks)]),
breaks = seq(min.val,max.val, by = 2)) +
scale_y_continuous(name = ylab) +
theme(text = element_text(size = 10, color = "gray20", face = "italic"),
axis.text.x = element_text(face = "plain"),
axis.text.y = element_text(face = "plain"))
model.name = mydata$model$name
my.week = paste("EW # ", weeks[iweek], sep = "")
gsub(model.name, ".", " ", model.name)
leg.text = c(mydata$FY, model.name, "Model")
plotlist[[iweek - nweeksFit + 3]] = plotlist[[iweek - nweeksFit + 3]] +
annotate("text", x = c(rep(-Inf,2), rep(Inf,3)), y = rep(Inf,5),
label = c(paste("   ", "Observed/Predicted", sep = ""), paste("   %ILI for ", my.week, sep = ""), leg.text),
hjust = c(0,0,1,1,1), vjust = c(2.5,4,2.5,4,5.5),
col = c("black","black","black","black","dodgerblue"),
family = "serif", size = 3.5)
}
}
}
layout = matrix(seq(1,9,1), nrow = 3, byrow = TRUE)
multiplot(plotlist = plotlist, layout = layout)
remove.packages("DICE")
library(DICE)
plotFitOnePatch.ggplot2
rm(list = ls())
require(DICE)
dataType = 'cdc'
year = 2010
nweeksFit = 52
RegState = "AZ"
model = 5
ireal = 1
idevice = 1
myName = "arizona-maricopa-2010-2011-5-52-1" #paste(dataType,'-','Region',RegState,'-',year,'-',(year+1),'-',model,'-',nweeksFit,'-',ireal,sep="")
## Loading the data (into mydata) and run.list
filename = paste("input-",myName,'.RData',sep="")
## This loads the object mydata - with ALL the data
load(filename)
run.list = input$run.list
filename = paste('profiles-',myName,'.RData',sep ="")
## This load an object called dump and from it we will
load(filename)
model_rtn = dump$model_rtn
model_profile = dump$model_profile
mydata$model$factor = 1
err <- plotFitOnePatch.ggplot2(model_rtn = model_rtn, model_profile = model_profile, mydata = mydata, ireal = ireal, run.list=run.list, idevice = 1)
rm(list = ls())
require(DICE)
dataType = 'cdc'
year = 2015
nweeksFit = 49
RegState = 9
model = 5
ireal = 1
idevice = 1
myName = paste(dataType,'-','Region',RegState,'-',year,'-',(year+1),'-',model,'-',nweeksFit,'-',ireal,sep="")
## Loading the data (into mydata) and run.list
filename = paste("input-",myName,'.RData',sep="")
## This loads the object mydata - with ALL the data
load(filename)
run.list = input$run.list
filename = paste('profiles-',myName,'.RData',sep ="")
## This load an object called dump and from it we will
load(filename)
model_rtn = dump$model_rtn
model_profile = dump$model_profile
mydata$model$factor = 1
err <- plotFitOnePatch.ggplot2(model_rtn = model_rtn, model_profile = model_profile, mydata = mydata, ireal = ireal, run.list=run.list, idevice = 1)
rm(list = ls())
require(DICE)
dataType = 'cdc'
year = 2015
nweeksFit = 32
RegState = 9
model = 5
ireal = 1
idevice = 1
myName = paste(dataType,'-','Region',RegState,'-',year,'-',(year+1),'-',model,'-',nweeksFit,'-',ireal,sep="")
## Loading the data (into mydata) and run.list
filename = paste("input-",myName,'.RData',sep="")
## This loads the object mydata - with ALL the data
load(filename)
run.list = input$run.list
filename = paste('profiles-',myName,'.RData',sep ="")
## This load an object called dump and from it we will
load(filename)
model_rtn = dump$model_rtn
model_profile = dump$model_profile
mydata$model$factor = 1
err <- plotFitOnePatch.ggplot2(model_rtn = model_rtn, model_profile = model_profile, mydata = mydata, ireal = ireal, run.list=run.list, idevice = 1)
