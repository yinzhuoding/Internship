SIR = function(time, state, pars) {
with(as.list(c(state,pars)), {
dS = -beta * S0 * I0
dI = beta * S0 * I0 - gamma * I0
dR = gamma * I0
return(list(c(dS,dI,dR)))
})
}
yini = c(S0 = 1-1e-6,I0 = 1e-6,R0 = 0)
pars = c(beta = 1.4247,gamma = 0.14286)
times = seq(0,70,by = 1)
out = ode(func = SIR, y = yini, parms = pars, times = times)
out = as.data.frame(out)
out$time = NULL
matplot(times,out,type = "l")
## SIR model without democracy
## It is the simple SIR epidemic without births or deaths
matplot(times,out,type = "l", xlab = "Time", ylab = "Susceptibles and Recovereds", main = "SIR Model",
lwd = 2, lty = 2, bty = "l", col = 2:4)
legend(40,0.7,c("Susceptibles","Infecteds","Recovereds"), pch = 2, col = 2:4)
legend(40,2,c("Susceptibles","Infecteds","Recovereds"), pch = 2, col = 2:4)
matplot(times,out,type = "l", xlab = "Time", ylab = "Susceptibles and Recovereds", main = "SIR Model",
lwd = 2, lty = 2, bty = "l", col = 2:4)
legend(40,2,c("Susceptibles","Infecteds","Recovereds"), pch = 2, col = 2:4)
matplot(times,out,type = "l", xlab = "Time", ylab = "Susceptibles and Recovereds", main = "SIR Model",
lwd = 2, lty = 2, bty = "l", col = 2:4)
legend(40,0.5,c("Susceptibles","Infecteds","Recovereds"), pch = 2, col = 2:4)
legend(40,0.5,c("Susceptibles","Infecteds","Recovereds"), pch = 1, col = 2:4)
?pch
?bty
matplot(times,out,type = "l", xlab = "Time", ylab = "Susceptibles and Recovereds", main = "SIR Model",
lwd = 2, lty = 2, col = 2:4)
legend(40,0.5,c("Susceptibles","Infecteds","Recovereds"), col = 2:4)
matplot(times,out,type = "l", xlab = "Time", ylab = "Susceptibles and Recovereds", main = "SIR Model",
lwd = 2, lty = 2, col = 2:4)
legend(40,0.5,c("Susceptibles","Infecteds","Recovereds"),pch = 1, col = 2:4)
matplot(times,out,type = "l", xlab = "Time", ylab = "Susceptibles and Recovereds", main = "SIR Model",
lwd = 2, lty = 1, col = 2:4)
legend(40,0.5,c("Susceptibles","Infecteds","Recovereds"),pch = 1, col = 2:4)
matplot(times,out,type = "l", xlab = "Time(days)", ylab = "Susceptibles and Recovereds", main = "SIR Model",
lwd = 2, lty = 1, col = 2:4)
legend(40,0.5,c("Susceptibles","Infecteds","Recovereds"),pch = 1, col = 2:4)
legend("right",c("Susceptibles","Infecteds","Recovereds"),pch = 1, col = 2:4)
legend(60,0.5,c("Susceptibles","Infecteds","Recovereds"),pch = 1, col = 2:4)
matplot(times,out,type = "l", xlab = "Time(days)", ylab = "Susceptibles and Recovereds", main = "SIR Model",
lwd = 2, lty = 1, col = 2:4)
legend(60,0.5,c("Susceptibles","Infecteds","Recovereds"),pch = 1, col = 2:4)
library(deSolve)
SIR = function(time, state, pars) {
with(as.list(c(state,pars)), {
dS = -beta * S0 * I0
dI = beta * S0 * I0 - gamma * I0
dR = gamma * I0
return(list(c(dS,dI,dR)))
})
}
yini = c(S0 = 1-1e-6,I0 = 1e-6,R0 = 0)
pars = c(beta = 1.4247,gamma = 0.14286)
times = seq(0,70,by = 1)
out = ode(func = SIR, y = yini, parms = pars, times = times)
out = as.data.frame(out)
out$time = NULL
matplot(times,out,type = "l", xlab = "Time(days)", ylab = "Susceptibles and Recovereds", main = "SIR Model",
lwd = 2, lty = 1, col = 2:4)
legend(60,0.5,c("Susceptibles","Infecteds","Recovereds"),pch = 1, col = 2:4)
?matplot
library("DICE", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
remove.packages("DICE")
require(DICE)
library(DICE)
library(geosphere)
library(RgoogleMaps)
library(ggmap)
library(rworldmap)
library(sp)
library(maptools)
require(RColorBrewer)
library(raster)
port1 = getData('GADM', country = 'CHN', level = 1)
table(port1$NAME_1)
port1$NAME_1 = as.factor(as.character(port1$NAME_1))
spplot(port1,"NAME_1",
col.regions = colorRampPalette(brewer.pal(12, "Set3"))(18),
col = "white",
#xlim = range(-10,-6), ylim = range(36.9,42.2),
asp = 1.0)
summary(port1)
str(port1)
map("china")
library(mapdata)
install.packages("mapdata")
library(mapdata)
map("china")
library(ggmap)
map <- get_map(location = '"Zhejiang", zoom = 10, maptype = 'roadmap')
map <- get_map(location = "Zhejiang", zoom = 10, maptype = 'roadmap')
ggmap(map)
dat = read.csv(text = "城市,jd,wd
北 京,116.4666667,39.9
上 海,121.4833333,31.23333333
天 津,117.1833333,39.15
重 庆,106.5333333,29.53333333
哈尔滨,126.6833333,45.75
长 春,125.3166667,43.86666667
沈 阳,123.4,41.83333333
呼和浩特,111.8,40.81666667
石家庄,114.4666667,38.03333333
太 原,112.5666667,37.86666667
济 南,117,36.63333333
郑 州,113.7,34.8
西 安,108.9,34.26666667
兰 州,103.8166667,36.05
银 川,106.2666667,38.33333333
西 宁,101.75,36.63333333
乌鲁木齐,87.6,43.8
合 肥,117.3,31.85
南 京,118.8333333,32.03333333
杭 州,120.15,30.23333333
长 沙,113,28.18333333
南 昌,115.8666667,28.68333333
武 汉,114.35,30.61666667
成 都,104.0833333,30.65
贵 阳,106.7,26.58333333
福 州,119.3,26.08333333
台 北,121.5166667,25.05
广 州,113.25,23.13333333
海 口,110.3333333,20.03333333
南 宁,108.3333333,22.8
昆 明,102.6833333,25
拉 萨,91.16666667,29.66666667
香 港,114.1666667,22.3
澳门,113.5,22.2")
library(maps)
library(mapdata)
map("china"), col = "darkgray", ylim = c(18, 54), panel.first = grid())
map("china")
map("china", col = "darkgray")
map("china", col = "darkgray",
panel.first = grid())
map("china", col = "darkgray", ylim = c(18, 54), panel.first = grid())
points(dat$jd, dat$wd, pch = 19, col = rgb(0, 0, 0, 0.5))
text(dat$jd, dat$wd, dat[, 1], cex = 0.9, col = rgb(0,0, 0, 0.7),
text(dat$jd, dat$wd, dat[, 1], cex = 0.9, col = rgb(0,0, 0, 0.7)
)
points(dat$jd, dat$wd, pch = 19, col = rgb(0, 0, 0, 0.5)),
pos = c(2, 4, 4, 4, 3, 4, 2, 3, 4, 2, 4, 2, 2, 4, 3, 2, 1, 3, 1, 1, 2, 3, 2, 2, 1, 2, 4, 3, 1, 2, 2, 4, 4, 2))
points(dat$jd, dat$wd, pch = 19, col = rgb(0, 0, 0, 0.5),
pos = c(2, 4, 4, 4, 3, 4, 2, 3, 4, 2, 4, 2, 2, 4, 3, 2, 1, 3, 1, 1, 2, 3, 2, 2, 1, 2, 4, 3, 1, 2, 2, 4, 4, 2))
axis(1, lwd = 0)
map("china", col = "darkgray", ylim = c(18, 54), panel.first = grid())
dev.off()
map("china", col = "darkgray", ylim = c(18, 54), panel.first = grid())
points(dat$jd, dat$wd, pch = 19, col = rgb(0, 0, 0, 0.5))
axis(1, lwd = 0)
axis(2, lwd = 0)
points(dat$jd, dat$wd, pch = 19, col = rgb(0, 0, 0, 0.5))
axis(1, lwd = 0)
axis(2, lwd = 0)
axis(3, lwd = 0)
axis(4, lwd = 0)
geocode("Nanjing")
map1 = get_map(location = c(lon = 118.7969, lat = 32.06025), zoom = 15)
ggmap(map1)
geocode("Jinling High School")
geocode("Nanjing Jinling High School")
geocode("Nanjing Jinling High School", output = "more")
geocode("UCSD", output = "more")
port1 = getData('GADM', country = 'CHN', level = 1)
table(port1$NAME_1)
library(sp)
library(maptools)
require(RColorBrewer)
library(raster)
library(maps)
port1 = getData('GADM', country = 'CHN', level = 1)
table(port1$NAME_1)
port1$NAME_1 = as.factor(as.character(port1$NAME_1))
## fills the map basing on variable NAME_1
spplot(port1,"NAME_1",
col.regions = colorRampPalette(brewer.pal(12, "Set3"))(18),
col = "white",
#xlim = range(-10,-6), ylim = range(36.9,42.2),
asp = 1.0)
port1$NAME_1 == "Anhui"
region1 = c("Jiangsu","Shanghai","Zhejiang")
port1$NAME_1 %in% region1
which(port1$NAME_1 %in% region1)
if(port1$NAME_1 %in% region1) {
port1$NAME_1 == "Region1"
}
index1 = which(port1$NAME_1 %in% region1) {
region1 = c("Jiangsu","Shanghai","Zhejiang")
index1 = which(port1$NAME_1 %in% region1)
port1$NAME_1[index1] == "Region1"
region1 = c("Jiangsu","Shanghai","Zhejiang")
index1 = which(port1$NAME_1 %in% region1)
port1$NAME_1[index1] = "Region1"
port1$NAME_1
port1 = getData('GADM', country = 'CHN', level = 1)
table(port1$NAME_1)
port1$NAME_1 = as.factor(as.character(port1$NAME_1))
## fills the map basing on variable NAME_1
region1 = c("Jiangsu","Shanghai","Zhejiang")
index1 = which(port1$NAME_1 %in% region1)
port1$NAME_1[index1] = "Region1"
port1 = getData('GADM', country = 'CHN', level = 1)
table(port1$NAME_1)
port1$NAME_1 = as.factor(as.character(port1$NAME_1))
## fills the map basing on variable NAME_1
region1 = c("Jiangsu","Shanghai","Zhejiang")
index1 = which(port1$NAME_1 %in% region1)
port1$NAME_1[index1] = as.factor("Region1")
port1 = getData('GADM', country = 'CHN', level = 1)
table(port1$NAME_1)
port1$NAME_1 = as.factor(as.character(port1$NAME_1))
class(port1$NAME_1)
region1 = c("Jiangsu","Shanghai","Zhejiang")
index1 = which(port1$NAME_1 %in% region1)
port1$NAME_1[index1] = factor("Region1")
port1 = getData('GADM', country = 'CHN', level = 1)
table(port1$NAME_1)
port1$NAME_1 = as.factor(as.character(port1$NAME_1))
## fills the map basing on variable NAME_1
region1 = c("Jiangsu","Shanghai","Zhejiang")
index1 = which(port1$NAME_1 %in% region1)
port1$col[index1] = factor("Region1")
spplot(port1,"col",
col.regions = colorRampPalette(brewer.pal(12, "Set3"))(18),
col = "white",
#xlim = range(-10,-6), ylim = range(36.9,42.2),
asp = 1.0)
region = vector()
region[1] = c("Heilongjiang","Jilin","Liaoning")
region[2] = c("Beijing","Tianjin","Henan","Hebei","Shandong","Shanxi")
region[3] = c("Jiangsu","Zhejiang","Shanghai","Anhui")
region = NULL
region[1] = c("Heilongjiang","Jilin","Liaoning")
region[2] = c("Beijing","Tianjin","Henan","Hebei","Shandong","Shanxi")
region[3] = c("Jiangsu","Zhejiang","Shanghai","Anhui")
region[4] = c("Fujian","Guangdong","Guangxi","Jiangxi")
region[5] = c("Shaanxi","Gansu","Ningxia Hui","Nei Mongol")
region[6] = c("Sichuan","Chongqing","Qinghai")
region[7] = c("Hunan","Hubei","Guizhou","Yunnan")
region[8] = "Xinjiang Uygur"
region[9] = "Xizang"
region = list()
region[[1]] = c("Heilongjiang","Jilin","Liaoning")
region[[2]] = c("Beijing","Tianjin","Henan","Hebei","Shandong","Shanxi")
region[[3]] = c("Jiangsu","Zhejiang","Shanghai","Anhui")
region[[4]] = c("Fujian","Guangdong","Guangxi","Jiangxi")
region[[5]] = c("Shaanxi","Gansu","Ningxia Hui","Nei Mongol")
region[[6]] = c("Sichuan","Chongqing","Qinghai")
region[[7]] = c("Hunan","Hubei","Guizhou","Yunnan")
region[[8]] = "Xinjiang Uygur"
region[[9]] = "Xizang"
paste("Region","1",sep = "")
index = NULL
for(i in 1:length(region)) {
index[i] = which(port1$NAME_1 %in% region[[i]])
port1$col[index[i]] = factor(paste("Region","i",sep = ""))
}
index = list()
for(i in 1:length(region)) {
index[[i]] = which(port1$NAME_1 %in% region[[i]])
port1$col[index[[i]]] = factor(paste("Region","i",sep = ""))
}
spplot(port1,"col",
col.regions = colorRampPalette(brewer.pal(12, "Set3"))(18),
col = "white",
#xlim = range(-10,-6), ylim = range(36.9,42.2),
asp = 1.0)
port1$col
length(region)
port1$col[index[[i]]]
region = list()
region[[1]] = c("Heilongjiang","Jilin","Liaoning")
region[[2]] = c("Beijing","Tianjin","Henan","Hebei","Shandong","Shanxi")
region[[3]] = c("Jiangsu","Zhejiang","Shanghai","Anhui")
region[[4]] = c("Fujian","Guangdong","Guangxi","Jiangxi","Hainan")
region[[5]] = c("Shaanxi","Gansu","Ningxia Hui","Nei Mongol")
region[[6]] = c("Sichuan","Chongqing","Qinghai")
region[[7]] = c("Hunan","Hubei","Guizhou","Yunnan")
region[[8]] = "Xinjiang Uygur"
region[[9]] = "Xizang"
index = list()
for(i in 1:length(region)) {
index[[i]] = which(port1$NAME_1 %in% region[[i]])
port1$col[index[[i]]] = factor(paste("Region",i,sep = ""))
}
port1$col
i = 9
index[[i]] = which(port1$NAME_1 %in% region[[i]])
index[[i]]
factor(paste("Region",i,sep = ""))
port1$col[index[[i]]] = factor(paste("Region",i,sep = ""))
port1$col[index[[i]]]
i = 9
index[[i]] = which(port1$NAME_1 %in% region[[i]])
factor(as.character(paste("Region",i,sep = "")))
port1$col[index[[i]]] = factor(as.character(paste("Region",i,sep = "")))
port1$col[index[[i]]]
index[[i]] = which(port1$NAME_1 %in% region[[i]])
(port1$col)[index[[i]]] = factor(as.character(paste("Region",i,sep = "")))
index[[i]]
region = list()
region[[1]] = c("Heilongjiang","Jilin","Liaoning")
region[[2]] = c("Beijing","Tianjin","Henan","Hebei","Shandong","Shanxi")
region[[3]] = c("Jiangsu","Zhejiang","Shanghai","Anhui")
region[[4]] = c("Fujian","Guangdong","Guangxi","Jiangxi","Hainan")
port1 = getData('GADM', country = 'CHN', level = 1)
table(port1$NAME_1)
port1$NAME_1 = as.factor(as.character(port1$NAME_1))
## fills the map basing on variable NAME_1
region = list()
region[[1]] = c("Heilongjiang","Jilin","Liaoning")
region[[2]] = c("Beijing","Tianjin","Henan","Hebei","Shandong","Shanxi")
region[[3]] = c("Jiangsu","Zhejiang","Shanghai","Anhui")
region[[4]] = c("Fujian","Guangdong","Guangxi","Jiangxi","Hainan")
region[[5]] = c("Shaanxi","Gansu","Ningxia Hui","Nei Mongol")
region[[6]] = c("Sichuan","Chongqing","Qinghai")
region[[7]] = c("Hunan","Hubei","Guizhou","Yunnan")
region[[8]] = "Xinjiang Uygur"
region[[9]] = "Xizang"
index = list()
index = list()
for(i in 1:length(region)) {
i = 9
index[[i]] = which(port1$NAME_1 %in% region[[i]])
port1$col[index[[i]]] = factor(as.character(paste("Region",i,sep = "")))
}
index = list()
for(i in 1:length(region)) {
index[[i]] = which(port1$NAME_1 %in% region[[i]])
port1$col[index[[i]]] = factor(as.character(paste("Region",i,sep = "")))
}
index = list()
for(i in 1:length(region)) {
index[[i]] = which(port1$NAME_1 %in% region[[i]])
port1$col[index[[i]]] = factor(as.character(paste("Region",i,sep = "")))
}
which(port1$NAME_1 %in% region[[i]])
index[[i]] = which(port1$NAME_1 %in% region[[i]])
port1$col[index[[i]]] = factor(as.character(paste("Region",i,sep = "")))
port1 = getData('GADM', country = 'CHN', level = 1)
table(port1$NAME_1)
port1$NAME_1 = as.factor(as.character(port1$NAME_1))
## fills the map basing on variable NAME_1
region = list()
region[[1]] = c("Heilongjiang","Jilin","Liaoning")
region[[2]] = c("Beijing","Tianjin","Henan","Hebei","Shandong","Shanxi")
region[[3]] = c("Jiangsu","Zhejiang","Shanghai","Anhui")
region[[4]] = c("Fujian","Guangdong","Guangxi","Jiangxi","Hainan")
region[[5]] = c("Shaanxi","Gansu","Ningxia Hui","Nei Mongol")
region[[6]] = c("Sichuan","Chongqing","Qinghai")
region[[7]] = c("Hunan","Hubei","Guizhou","Yunnan")
region[[8]] = "Xinjiang Uygur"
region[[9]] = "Xizang"
index = list()
for(i in 1:length(region)) {
index[[i]] = which(port1$NAME_1 %in% region[[i]])
port1$col[index[[i]]] = factor(as.character(paste("Region",i,sep = "")))
}
port1 = getData('GADM', country = 'CHN', level = 1)
table(port1$NAME_1)
port1$NAME_1 = as.factor(as.character(port1$NAME_1))
## fills the map basing on variable NAME_1
region = list()
region[[1]] = c("Heilongjiang","Jilin","Liaoning")
region[[2]] = c("Beijing","Tianjin","Henan","Hebei","Shandong","Shanxi")
region[[3]] = c("Jiangsu","Zhejiang","Shanghai","Anhui")
region[[4]] = c("Fujian","Guangdong","Guangxi","Jiangxi","Hainan")
region[[5]] = c("Shaanxi","Gansu","Ningxia Hui","Nei Mongol")
region[[6]] = c("Sichuan","Chongqing","Qinghai")
region[[7]] = c("Hunan","Hubei","Guizhou","Yunnan")
region[[8]] = "Xinjiang Uygur"
region[[9]] = "Xizang"
province.list = port1$NAME_1
province.list = port1$NAME_1
nprovince = length(province.list)
province.list
nprovince = length(province.list)
for(i in nprovince) {
k = regexpr(":", province.list[i])
if(k != -1)
province.list[i] = substr(province.list[i], start = 1, stop = (k-1))
}
province.list
port1 = getData('GADM', country = 'CHN', level = 1)
table(port1$NAME_1)
port1$NAME_1 = as.factor(as.character(port1$NAME_1))
## fills the map basing on variable NAME_1
region_list = list(Region1 = c("Heilongjiang","Jilin","Liaoning"),
Region2 = c("Beijing","Tianjin","Henan","Hebei","Shandong","Shanxi"),
Region3 = c("Jiangsu","Zhejiang","Shanghai","Anhui"),
Region4 = c("Fujian","Guangdong","Guangxi","Jiangxi","Hainan"),
Region5 = c("Shaanxi","Gansu","Ningxia Hui","Nei Mongol"),
Region6 = c("Sichuan","Chongqing","Qinghai"),
Region7 = c("Hunan","Hubei","Guizhou","Yunnan"),
Region8 = "Xinjiang Uygur",
Region9 = "Xizang")
province.list = port1$NAME_1
nprovince = length(province.list)
for(i in nprovince) {
k = regexpr(":", province.list[i])
if(k != -1)
province.list[i] = substr(province.list[i], start = 1, stop = (k-1))
}
col = seq(1,10,1)
province.list = port1$NAME_1
nprovince = length(province.list)
for(i in nprovince) {
k = regexpr(":", province.list[i])
if(k != -1)
province.list[i] = substr(province.list[i], start = 1, stop = (k-1))
}
for(j in 1:nprovince) {
myregion = region_list[[j]]
index = which(as.character(province.list) %in% myregion)
port1$col[index] = col[j]
}
col = rainbow(9)
province.list = port1$NAME_1
nprovince = length(province.list)
for(i in nprovince) {
k = regexpr(":", province.list[i])
if(k != -1)
province.list[i] = substr(province.list[i], start = 1, stop = (k-1))
}
for(j in 1:nprovince) {
myregion = region_list[[j]]
index = which(as.character(province.list) %in% myregion)
prov.col[index] = col[j]
}
prov.col = NULL
for(j in 1:nprovince) {
myregion = region_list[[j]]
index = which(as.character(province.list) %in% myregion)
prov.col[index] = col[j]
}
prov.col = NULL
nregion = length(region_list)
for(j in 1:nregion) {
myregion = region_list[[j]]
index = which(as.character(province.list) %in% myregion)
prov.col[index] = col[j]
}
spplot(port1,"NAME_1",
col.regions = prov.col,
col = "white",
#xlim = range(-10,-6), ylim = range(36.9,42.2),
asp = 1.0)
？spplot
?spplot
spplot(port1,"NAME_1",
col.regions = prov.col,
col = "white",
#xlim = range(-10,-6), ylim = range(36.9,42.2),
asp = 1.0, zcol = 0)
spplot(port1,"NAME_1",
col.regions = prov.col,
col = "white",
#xlim = range(-10,-6), ylim = range(36.9,42.2),
asp = 1.0, zcol = 1)
spplot(port1,"NAME_1",
col.regions = prov.col,
col = "white",
#xlim = range(-10,-6), ylim = range(36.9,42.2),
asp = 1.0, zcol = "1")
spplot(port1,"NAME_1",
col.regions = prov.col,
col = "white",
#xlim = range(-10,-6), ylim = range(36.9,42.2),
asp = 1.0,zcol = "GEOLOGY")
spplot(port1,"NAME_1",
col.regions = prov.col,
col = "white",
#xlim = range(-10,-6), ylim = range(36.9,42.2),
asp = 1.0,zcol = "NAME_1")
spplot(port1,"NAME_1",
col.regions = prov.col,
col = "white",
)
?asp
spplot(port1,"NAME_1",
col.regions = prov.col,
col = "white",
asp = 0.8)
spplot(port1,"NAME_1",
col.regions = prov.col,
col = "white",
asp = 0.8,colorkey = FALSE)
spplot(port1,"NAME_1",
col.regions = prov.col,
col = "white",
asp = 0.8,colorkey = FALSE,
key.space = list(x = 0.2,y = 0.2, corner = c(0,0)))
spplot(port1,"NAME_1",
col.regions = prov.col,
col = "white",
asp = 0.8,colorkey = FALSE,
#key.space = list(x = 0.2,y = 0.2, corner = c(0,0)),
scales = list(draw = T))
?key.space
??key.space
install.packages("mcmc")
install.packages("SweaveListingUtils")
library("mcmc", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
setwd("~/Documents/yinzhuo/SummerInern/Week3 6:27:2016 - 7:1:2016/Dice plotting 2/output")
system("convert -delay 20 *.png map.gif")
file.remove(list.files(pattern = ".png"))
setwd(mainDir)
